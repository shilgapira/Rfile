//
// GSRfileTemplate.h
//
// Copyright (c) 2013 Gil Shapira
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


// Created by converting Rfile.template to a multiline string via http://multilineobjc.herokuapp.com
// and replacing the ' \' at the end of each line with '\n\'
static NSString *GSRfileTemplate =
@"\
//\n\
// Generated by:\n\
//\n\
// {{cmdline}}\n\
//\n\
\n\
\n\
////////////////////////////////////////////////////////////////////////////////\n\
#pragma mark - Convenience macros\n\
////////////////////////////////////////////////////////////////////////////////\n\
//\n\
// These macros return the requested resource directly.\n\
//\n\
// For example, say we have a UITableView showing a list of countries. We've got\n\
// retina and non-retina images for each country's flag (e.g., \"FlagSweden.png\"\n\
// and \"FlagSweden@2x.png\") and we've got localized names for each country as\n\
// entries (e.g., \"country_name_sweden\") in the Localizable.strings files.\n\
//\n\
// In this case, to set a country's name and flag image in a UITableViewCell we\n\
// might do something like this:\n\
//\n\
//     cell.textLabel.text = {{p}}String(CountryNameSweden);\n\
{{#fonts}}//     cell.textLabel.font = {{p}}Font(BaskervilleBold, 20.0f);\n\
{{/fonts}}//     cell.imageView.image = {{p}}Image(FlagSweden};\n\
//\n\
\n\
#define {{p}}String(NAME)                 _{{p}}String({{p}}StringKey(NAME))\n\
\n\
#define {{p}}FormatString(NAME, ...)      [NSString stringWithFormat:{{p}}String(NAME),##__VA_ARGS__]\n\
\n\
#define {{p}}Image(NAME)                  _{{p}}Image({{p}}ImageFile(NAME))\n\
{{#fonts}}\n\
#define {{p}}Font(NAME, SIZE)             _{{p}}Font({{p}}FontName(NAME), SIZE)\n\
{{/fonts}}\n\
\n\
\n\
////////////////////////////////////////////////////////////////////////////////\n\
#pragma mark - Utility macros\n\
////////////////////////////////////////////////////////////////////////////////\n\
//\n\
// These macros return the resource's key rather than the resource itself. They\n\
// can be used when the resource needs to be accessed using other APIs than\n\
// those used in the convenience macros above.\n\
//\n\
\n\
//\n\
// Returns the key for a localized string. The key is the same one used in the\n\
// Localizable.strings file, e.g., \"country_name_sweden\" in the example above.\n\
//\n\
#define {{p}}StringKey(NAME)              _{{p}}ResourceKey(String, NAME)\n\
\n\
//\n\
// Returns the filename of a resource image. This can be used when images need\n\
// to be accessed directly or if [UIImage imageNamed:] isn't suitable. For\n\
// example, to create an image using [UIImage imageWithContentsOfFile:] we can\n\
// do something like this:\n\
//\n\
//     image = [UIImage imageWithContentsOfFile:{{p}}ImageFile(FlagSweden)];\n\
//\n\
#define {{p}}ImageFile(NAME)              _{{p}}ResourceKey(Image, NAME)\n\
{{#fonts}}\n\
//\n\
// Returns the name of a resource or platform font.\n\
//\n\
#define {{p}}FontName(NAME)               _{{p}}ResourceKey(Font, NAME)\n\
{{/fonts}}\n\
\n\
\n\
////////////////////////////////////////////////////////////////////////////////\n\
#pragma mark - Internal\n\
////////////////////////////////////////////////////////////////////////////////\n\
//\n\
// Internal defines and helpers used by the above macros. These should be\n\
// considered implementation details and aren't meant to be used directly.\n\
//\n\
\n\
\n\
//\n\
// Low level macro that translates resource types and names into one of the\n\
// constants #defined below.\n\
//\n\
// The first line fools Xcode into thinking it's accessing an instance of one\n\
// of the helper structs thus enabling code completion. During compilation this\n\
// code is stripped out by compiler optimizations, so in practice using this\n\
// macro results in the same disassembly as using the string literals directly.\n\
//\n\
#define _{{p}}ResourceKey(TYPE, NAME)     \\\n\
    ((void)(NO && ((void)((_{{p}}Resources *) NULL)->TYPE.NAME, NO)), \\\n\
    _{{p}}##TYPE##NAME)\n\
\n\
\n\
//\n\
// The convenience macros above resolve the resource key and call these macros\n\
// to return the relevant object. This indirection is redundant but it helps\n\
// Xcode to not get confused with syntax coloring of the resource names.\n\
//\n\
#define _{{p}}String(KEY)                 NSLocalizedString(KEY, nil)\n\
\n\
#define _{{p}}Image(KEY)                  [UIImage imageNamed:(KEY)]\n\
{{#fonts}}\n\
#define _{{p}}Font(KEY, SIZE)             [UIFont fontWithName:(KEY) size:(SIZE)]\n\
{{/fonts}}\n\
\n\
\n\
\n\
//\n\
// Resource keys\n\
//\n\
{{#types}}\n\
{{#resources}}#define _{{p}}{{define}} @\"{{resource}}\"\n\
{{/resources}}{{/types}}\n\
\n\
//\n\
// Helper structs\n\
//\n\
{{#types}}\n\
typedef struct {\n\
{{#resources}}    int {{helper}};\n\
{{/resources}}} _{{p}}{{type}}s;\n\
{{/types}}\n\
typedef struct {\n\
{{#types}}    _{{p}}{{type}}s {{type}};\n\
{{/types}}} _{{p}}Resources;\n\
";
